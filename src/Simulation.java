
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.ConcurrentModificationException;
import java.util.List;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JPanel;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Ceng443-Hw1
//  @ File Name : Simulation.java
//  @ Date : 04.04.2015
//  @ Author : 
//
//




public class Simulation extends JPanel
{
    public Display display;
    public Knight knights;    
    private static Simulation instance;

    private List<Mage> mageList;
    private List<Priest> priestList;
    private List<Rogue> rogueList;
    
    private List<Knight> elMorads;
    private List<Knight> karus;
    
    private static Team teamOfElMorad;
    private static Team teamOfKarus;
    
    public boolean isElMorad;
    public boolean isKarus;
    
    public boolean isPaused;
    
    public Simulation() 
    {
        mageList = new ArrayList<>();
        priestList = new ArrayList<>();
        rogueList = new ArrayList<>();
        
        elMorads = new ArrayList<>();
        karus = new ArrayList<>();
        
        isElMorad = false;
        isKarus = false;
        
        isPaused = false;
        
    }
    public synchronized static Simulation getInstance() 
    {

        if(instance == null)
        {
            instance = new Simulation();
        }
        return instance;
    
    }

    public static Team getTeamOfElMorad() {
        return teamOfElMorad;
    }

    public static void setTeamOfElMorad(Team teamOfElMorad) {
        Simulation.teamOfElMorad = teamOfElMorad;
    }

    public static Team getTeamOfKarus() {
        return teamOfKarus;
    }

    public static void setTeamOfKarus(Team teamOfKarus) {
        Simulation.teamOfKarus = teamOfKarus;
    }

    public List<Knight> getElMorads() {
        return elMorads;
    }

    public void setElMorads(List<Knight> elMorads) {
        this.elMorads = elMorads;
    }

    public List<Knight> getKarus() {
        return karus;
    }

    public void setKarus(List<Knight> karus) {
        this.karus = karus;
    }

   
    public List<Mage> getMageList() {
        return mageList;
    }

    public void setMageList(List<Mage> mageList) {
        this.mageList = mageList;
    }

    public List<Priest> getPriestList() {
        return priestList;
    }

    public void setPriestList(List<Priest> priestList) {
        this.priestList = priestList;
    }

    public List<Rogue> getRogueList() {
        return rogueList;
    }

    public void setRogueList(List<Rogue> rogueList) {
        this.rogueList = rogueList;
    }

    public void increaseTotalDamageOfTeam(Team team, int damage)
    {
        team.setTotalDamage(team.getTotalDamage() + damage);
    }
    
    public void increaseTotalKillOfTeam(Team team)
    {
        team.setTotalKills(team.getTotalKills() + 1);
    }
    
    public void increaseScoreOfTeam(Team team)
    {
        team.setScore(team.getScore() + 75);
    }
    
    public void stepAll()
    {
        
        for(Knight kn : elMorads)
            kn.act();
        
        for(Knight kn : karus)
            kn.act();
    }
    
    
    
    public static void main(String args[])
    {
        int counter = 0;
        
        teamOfElMorad = new Team("EL MORAD");
        teamOfKarus = new Team("KARUS");
        
        Display.getInstance(Simulation.getInstance());
        Simulation.getInstance().initialKnightGenerator(teamOfElMorad, teamOfKarus);

        
        while(!Simulation.getInstance().isPaused){
            
            
            try {
                Thread.sleep(40);
                Display.getInstance().repaint();
                //Simulation.getInstance().repaint();
                
                Simulation.getInstance().stepAll();
                
                /*Strategy and Attack Checker*/
                if(counter == 25)
                {
                    Simulation.getInstance().strategyChanger();
                    counter = 0;
                }
                counter++;
                
                Simulation.getInstance().deadChecker();
                Simulation.getInstance().decoratorChecker();
                
            } catch (Exception e) {
            }
        }
        
    }
    
    @Override
    public Dimension getPreferredSize()
    {
        return new Dimension(800,600);
    }
    @Override
    public void paintComponent(Graphics g)
    {
        super.paintComponent(g);
        
        try {
            Image image = ImageIO.read(new File("src/background.jpg"));
            g.drawImage(image, 0, 0, 800, 600, null);   

        } catch (IOException ex) {
            Logger.getLogger(Simulation.class.getName()).log(Level.SEVERE, null, ex);
        }
        try{
        for(Knight kn : elMorads)
            kn.draw(g);
        
        for(Knight kn : karus)
            kn.draw(g);
        }
        catch(ConcurrentModificationException e)
        {
            
        }
    }
    
    private void decoratorChecker()
    {
        Knight kn = null;
        
        for(int i = 0; i < Simulation.getInstance().getElMorads().size(); i++)
        {
            kn = Simulation.getInstance().getElMorads().get(i);
            
            if(76 <= kn.getScore() && kn.getScore() <= 150)
            {
                kn = new Grade3Decorator(kn);
            }
            else if(151 <= kn.getScore() && kn.getScore() <= 300)
            {
                kn = new Grade2Decorator(kn);
            }
            else if(301 <= kn.getScore())
            {
                kn = new Grade1Decorator(kn);
            }   
            
            Simulation.getInstance().getElMorads().set(i, kn);
            
            System.out.println(kn.getScore());
        }
        
        for(int i = 0; i < Simulation.getInstance().getKarus().size(); i++)
        {
            kn = Simulation.getInstance().getKarus().get(i);
            
            if(76 <= kn.getScore() && kn.getScore() <= 150)
            {
                kn = new Grade3Decorator(kn);
            }
            else if(151 <= kn.getScore() && kn.getScore() <= 300)
            {
                kn = new Grade2Decorator(kn);
            }
            else if(301 <= kn.getScore())
            {
                kn = new Grade1Decorator(kn);
            }
            Simulation.getInstance().getKarus().set(i, kn);
            
            System.out.println(kn.getScore());
        }
    }
    
    private void deadChecker()
    {
        
        /*Karus and ElMorad Checker*/
        if(Simulation.getInstance().getElMorads().size() < 8)
        {
            Random r1 = new Random();
            int rf1 = r1.nextInt(3);
            SoldierFactory sf = null;

            if(rf1 == 0)
            {
                sf = new RogueFactory();
                sf.produce(teamOfElMorad);
            }
            else if(rf1 == 1)
            {
                sf = new MageFactory();
                sf.produce(teamOfElMorad);
            }
            else
            {
                sf = new PriestFactory();
                sf.produce(teamOfElMorad);
            }
        }
        if(Simulation.getInstance().getKarus().size() < 8)
        {
            Random r2 = new Random();
            int rf2 = r2.nextInt(3);
            SoldierFactory sf2 = null;

            if(rf2 == 0)
            {
                sf2 = new RogueFactory();
                sf2.produce(teamOfKarus);
            }
            else if(rf2 == 1)
            {
                sf2 = new MageFactory();
                sf2.produce(teamOfKarus);
            }
            else
            {
                sf2 = new PriestFactory();
                sf2.produce(teamOfKarus);
            }
        }
    }
    
    private void strategyChanger()
    {
        
        Random strategyChangerRandom = new Random();
        int strategyChanger = -1;
        Random attackChangerRandom = new Random();
        int attackChanger = -1;

        for(Knight kn : Simulation.getInstance().getElMorads())
        {
            strategyChanger = strategyChangerRandom.nextInt(4);
            if(strategyChanger == 0)
                kn.setStrategy(new RandomMove());
            else if(strategyChanger == 1)
                kn.setStrategy(new AttackClosest());
            else if(strategyChanger == 2)
                kn.setStrategy(new AttackWeakest());
            else
                kn.setStrategy(new AttackStrongest());

            attackChanger = attackChangerRandom.nextInt(5);
            /*Special Attack*/
            if(attackChanger == 1)
                kn.rangedAttack();
            /*Normal Attack*/
            else
                kn.meleeAttack();
        }

        for(Knight kn : Simulation.getInstance().getKarus())
        {
            strategyChanger = strategyChangerRandom.nextInt(4);
            if(strategyChanger == 0)
                kn.setStrategy(new RandomMove());
            else if(strategyChanger == 1)
                kn.setStrategy(new AttackClosest());
            else if(strategyChanger == 2)
                kn.setStrategy(new AttackWeakest());
            else
                kn.setStrategy(new AttackStrongest());

            attackChanger = attackChangerRandom.nextInt(5);
            /*Special Attack*/
            if(attackChanger == 1)
                kn.rangedAttack();
            /*Normal Attack*/
            else
                kn.meleeAttack();
        }
    }
    
    private void initialKnightGenerator(Team teamOfElMorad, Team teamOfKarus) 
    {
        SoldierFactory sf = null;
        initialCreatePriests(teamOfElMorad, teamOfKarus, sf);
        
        sf = null;
        initialCreateRogues(teamOfElMorad, teamOfKarus, sf);
        
        sf = null;
        initialCreateMages(teamOfElMorad, teamOfKarus, sf);
        
    }

    private void initialCreatePriests(Team teamOfElMorad, Team teamOfKarus, SoldierFactory sf) 
    {
        
        sf = new PriestFactory();
        
        for(int i = 0; i < 2; i++)    
        {
            sf.produce(teamOfElMorad);
            
            sf.produce(teamOfKarus);
        }
    }
    
    private void initialCreateRogues(Team teamOfElMorad, Team teamOfKarus, SoldierFactory sf)
    {
        sf = new RogueFactory();
        
        for(int i = 0; i < 3; i++)
        {
            sf.produce(teamOfElMorad);

            sf.produce(teamOfKarus);
            
        }
    }
    
    private void initialCreateMages(Team teamOfElMorad, Team teamOfKarus, SoldierFactory sf)
    {
        sf = new MageFactory();
        
        for(int i = 0; i < 3; i++)
        {
            sf.produce(teamOfElMorad);
            
            
            sf.produce(teamOfKarus);
        }
    }
}
